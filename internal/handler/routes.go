// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	activity "luckydraw-backend/internal/handler/activity"
	adminer "luckydraw-backend/internal/handler/adminer"
	awards "luckydraw-backend/internal/handler/awards"
	users "luckydraw-backend/internal/handler/users"
	winningRecords "luckydraw-backend/internal/handler/winningRecords"
	"luckydraw-backend/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/luckydraw",
					Handler: LuckydrawHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/ip",
					Handler: GetRemoteIpHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/math-captcha",
					Handler: GetMathCaptchaHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/test",
				Handler: TestHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: activity.AddActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: activity.PutActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: activity.GetActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/",
					Handler: activity.DelActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: activity.GetActivityListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/enums",
					Handler: activity.GetActivityEnumsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/activity"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: adminer.AddAdminerHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: adminer.PutAdminerHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: adminer.GetAdminerHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/",
					Handler: adminer.DelAdminerHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: adminer.GetAdminerListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/enums",
					Handler: adminer.GetAdminerEnumsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/adminer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: adminer.AdminerLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/currentAdminer",
					Handler: adminer.CurrentAdminerHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/logout",
					Handler: adminer.AdminerLogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: awards.AddAwardsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: awards.PutAwardsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: awards.GetAwardsHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/",
					Handler: awards.DelAwardsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: awards.GetAwardsListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/enums",
					Handler: awards.GetAwardsEnumsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/awards"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: awards.GetAwardsListByActivityUuidHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/selectAwardsByIds",
				Handler: awards.SelectAwardsByIdsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/awards"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: users.AddUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: users.PutUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: users.GetUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/",
					Handler: users.DelUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: users.GetUsersListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/enums",
					Handler: users.GetUsersEnumsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/users"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: users.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: users.UserLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/users"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/currentUser",
					Handler: users.CurrentUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/users"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: winningRecords.AddWinningRecordsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/",
					Handler: winningRecords.PutWinningRecordsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: winningRecords.GetWinningRecordsHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/",
					Handler: winningRecords.DelWinningRecordsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: winningRecords.GetWinningRecordsListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/enums",
					Handler: winningRecords.GetWinningRecordsEnumsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/winningRecords"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/query",
					Handler: winningRecords.QueryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/winningRecords"),
	)
}
