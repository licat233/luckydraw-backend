// Code generated by sql2rpc. DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"strings"

	"github.com/Masterminds/squirrel"
)

type (
	activitymodel interface {
		FindList(ctx context.Context, pageSize, page int64, keyword string, activity *Activity) (resp []*Activity, total int64, err error)
	}
	extendActivityModel struct {
		*defaultActivityModel
	}
)

func newExtendActivityModelModel(defaultActivityModel *defaultActivityModel) *extendActivityModel {
	return &extendActivityModel{
		defaultActivityModel,
	}
}

func (m *extendActivityModel) FindList(ctx context.Context, pageSize, page int64, keyword string, activity *Activity) (resp []*Activity, total int64, err error) {
	hasName := false
	sq := squirrel.Select(activityRows).From(m.table)
	if activity != nil {
		if activity.Id > 0 {
			sq = sq.Where("id = ?", activity.Id)
		}
		if activity.Uuid != "" {
			sq = sq.Where("uuid = ?", activity.Uuid)
		}
		if activity.Name != "" {
			sq = sq.Where("name = ?", activity.Name)
			hasName = true
		}
		if activity.Status >= 0 {
			sq = sq.Where("status = ?", activity.Status)
		}
	}
	if keyword != "" && !hasName {
		sq = sq.Where("name LIKE ?", fmt.Sprintf("%%%s%%", keyword))
	}
	if pageSize > 0 && page > 0 {
		sqCount := sq.RemoveLimit().RemoveOffset()
		sq = sq.Limit(uint64(pageSize)).Offset(uint64((page - 1) * pageSize))
		queryCount, agrsCount, e := sqCount.ToSql()
		if e != nil {
			err = e
			return
		}
		queryCount = strings.ReplaceAll(queryCount, activityRows, "COUNT(*)")
		if err = m.conn.QueryRowCtx(ctx, &total, queryCount, agrsCount...); err != nil {
			return
		}
	}
	query, agrs, err := sq.ToSql()
	if err != nil {
		return
	}
	resp = make([]*Activity, 0)
	if err = m.conn.QueryRowsCtx(ctx, &resp, query, agrs...); err != nil {
		return
	}
	return
}
