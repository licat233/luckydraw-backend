// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	awardsFieldNames          = builder.RawFieldNames(&Awards{})
	awardsRows                = strings.Join(awardsFieldNames, ",")
	awardsRowsExpectAutoSet   = strings.Join(stringx.Remove(awardsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	awardsRowsWithPlaceHolder = strings.Join(stringx.Remove(awardsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	awardsModel interface {
		Insert(ctx context.Context, data *Awards) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Awards, error)
		Update(ctx context.Context, data *Awards) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAwardsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Awards struct {
		Id         int64     `db:"id"`
		ActivityId int64     `db:"activity_id"`
		Uuid       string    `db:"uuid"`
		Grade      string    `db:"grade"`
		Name       string    `db:"name"`
		Image      string    `db:"image"`
		Price      float64   `db:"price"` // 奖品价格
		Prob       int64     `db:"prob"`
		Quantity   int64     `db:"quantity"` // 总数量
		Count      int64     `db:"count"`    // 已抽数量
		IsWin      int64     `db:"is_win"`   // 是否中奖
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newAwardsModel(conn sqlx.SqlConn) *defaultAwardsModel {
	return &defaultAwardsModel{
		conn:  conn,
		table: "`awards`",
	}
}

func (m *defaultAwardsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAwardsModel) FindOne(ctx context.Context, id int64) (*Awards, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", awardsRows, m.table)
	var resp Awards
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAwardsModel) Insert(ctx context.Context, data *Awards) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, awardsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ActivityId, data.Uuid, data.Grade, data.Name, data.Image, data.Price, data.Prob, data.Quantity, data.Count, data.IsWin)
	return ret, err
}

func (m *defaultAwardsModel) Update(ctx context.Context, data *Awards) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, awardsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ActivityId, data.Uuid, data.Grade, data.Name, data.Image, data.Price, data.Prob, data.Quantity, data.Count, data.IsWin, data.Id)
	return err
}

func (m *defaultAwardsModel) tableName() string {
	return m.table
}
