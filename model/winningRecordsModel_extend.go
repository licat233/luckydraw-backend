// Code generated by sql2rpc. DO NOT EDIT.

package model

import (
	"context"
	"strings"

	"github.com/Masterminds/squirrel"
)

type (
	winningRecordsmodel interface {
		FindList(ctx context.Context, pageSize, page int64, keyword string, winningRecords *WinningRecords) (resp []*WinningRecords, total int64, err error)
	}
	extendWinningRecordsModel struct {
		*defaultWinningRecordsModel
	}
)

func newExtendWinningRecordsModelModel(defaultWinningRecordsModel *defaultWinningRecordsModel) *extendWinningRecordsModel {
	return &extendWinningRecordsModel{
		defaultWinningRecordsModel,
	}
}

func (m *extendWinningRecordsModel) FindList(ctx context.Context, pageSize, page int64, keyword string, winningRecords *WinningRecords) (resp []*WinningRecords, total int64, err error) {
	sq := squirrel.Select(winningRecordsRows).From(m.table)
	if winningRecords != nil {
		if winningRecords.Id > 0 {
			sq = sq.Where("id = ?", winningRecords.Id)
		}
		if winningRecords.UserId > 0 {
			sq = sq.Where("user_id = ?", winningRecords.UserId)
		}
		if winningRecords.AwardId > 0 {
			sq = sq.Where("award_id = ?", winningRecords.AwardId)
		}
		if winningRecords.ActivityId > 0 {
			sq = sq.Where("activity_id = ?", winningRecords.ActivityId)
		}
		if winningRecords.Ip != "" {
			sq = sq.Where("ip = ?", winningRecords.Ip)
		}
		if winningRecords.Platform != "" {
			sq = sq.Where("platform = ?", winningRecords.Platform)
		}
	}
	if pageSize > 0 && page > 0 {
		sqCount := sq.RemoveLimit().RemoveOffset()
		sq = sq.Limit(uint64(pageSize)).Offset(uint64((page - 1) * pageSize))
		queryCount, agrsCount, e := sqCount.ToSql()
		if e != nil {
			err = e
			return
		}
		queryCount = strings.ReplaceAll(queryCount, winningRecordsRows, "COUNT(*)")
		if err = m.conn.QueryRowCtx(ctx, &total, queryCount, agrsCount...); err != nil {
			return
		}
	}
	query, agrs, err := sq.ToSql()
	if err != nil {
		return
	}
	resp = make([]*WinningRecords, 0)
	if err = m.conn.QueryRowsCtx(ctx, &resp, query, agrs...); err != nil {
		return
	}
	return
}
