// Code generated by sql2rpc. DO NOT EDIT.

package model

import (
	"context"
	"strings"

	"github.com/Masterminds/squirrel"
)

type (
	adminermodel interface {
		FindList(ctx context.Context, pageSize, page int64, keyword string, adminer *Adminer) (resp []*Adminer, total int64, err error)
	}
	extendAdminerModel struct {
		*defaultAdminerModel
	}
)

func newExtendAdminerModelModel(defaultAdminerModel *defaultAdminerModel) *extendAdminerModel {
	return &extendAdminerModel{
		defaultAdminerModel,
	}
}

func (m *extendAdminerModel) FindList(ctx context.Context, pageSize, page int64, keyword string, adminer *Adminer) (resp []*Adminer, total int64, err error) {
	sq := squirrel.Select(adminerRows).From(m.table)
	if adminer != nil {
		if adminer.Id > 0 {
			sq = sq.Where("id = ?", adminer.Id)
		}
		if adminer.Username != "" {
			sq = sq.Where("username = ?", adminer.Username)
		}
		if adminer.Password != "" {
			sq = sq.Where("password = ?", adminer.Password)
		}
		if adminer.Access != "" {
			sq = sq.Where("access = ?", adminer.Access)
		}
		if adminer.IsSuper >= 0 {
			sq = sq.Where("is_super = ?", adminer.IsSuper)
		}
	}
	if pageSize > 0 && page > 0 {
		sqCount := sq.RemoveLimit().RemoveOffset()
		sq = sq.Limit(uint64(pageSize)).Offset(uint64((page - 1) * pageSize))
		queryCount, agrsCount, e := sqCount.ToSql()
		if e != nil {
			err = e
			return
		}
		queryCount = strings.ReplaceAll(queryCount, adminerRows, "COUNT(*)")
		if err = m.conn.QueryRowCtx(ctx, &total, queryCount, agrsCount...); err != nil {
			return
		}
	}
	query, agrs, err := sq.ToSql()
	if err != nil {
		return
	}
	resp = make([]*Adminer, 0)
	if err = m.conn.QueryRowsCtx(ctx, &resp, query, agrs...); err != nil {
		return
	}
	return
}
