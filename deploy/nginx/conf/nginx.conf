# 负载均衡的写法
# 在http块中的全局块中配置
# upstream固定写法 后面的myserver可以自定义
upstream admin_server {
    server http://127.0.0.1:7878;
    keepalive 1000; # 默认值100，可能不够用
}

server {
    listen 80;
    server_name api.lzy.pub;
    index index.php index.html index.htm default.php default.htm default.html;

    # CORS_CONFIG
    add_header 'Access-Control-Allow-Origin' '*.lzy.pub'; # 允许跨域请求的域，*代表所有
    add_header 'Access-Control-Allow-Credentials' 'true'; # 允许带上cookie请求
    add_header 'Access-Control-Allow-Methods' *; #允许请求的方法，比如 GET/POST/PUT/DELETE
    add_header 'Access-Control-Allow-Headers' *; # 允许请求的header

    # PROXY_CONFIG
    proxy_set_header Host $host; #设置真实客户端地址，默认值是 $proxy_host;
    proxy_set_header X-Real_IP $remote_addr; # 启用客户端真实地址（否则日志中显示的是代理在访问网站）
    proxy_set_header X-Real-IP $remote_addr; # 启用客户端真实地址（否则日志中显示的是代理在访问网站）
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 记录代理地址
    proxy_connect_timeout 60s; # 后端服务器连接的超时时间发起三次握手等候响应超时时间，默认60s
    proxy_send_timeout 60s; # 后端服务器数据回传时间就是在规定时间之内后端服务器必须传完所有的数据 默认60s
    proxy_read_timeout 60s; # nginx接收upstream（上游/真实） server数据超时, 默认60s, 如果连续的60s内没有收到1个字节, 连接关闭。像长连接，websockt的有效时间
    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; #指定应将请求传递到下一个服务器的情况
    proxy_set_header X-Forwarded-Proto $scheme; # 用于识别协议（HTTP 或 HTTPS）
    proxy_redirect off; # 修改被代理服务器返回的响应头中的Location头域和“refresh”头域;
    proxy_buffers 4 32k; # 设置存储被代理服务器响应的body所占用的buffer个数和每个buffer大小
    proxy_buffer_size 4k; # Nginx使用该大小申请read_buf，即大小指定了 upstream header 最大长度，如果响应头超过了这个长度，Nginx会报upstream sent too big header错误，然后client收到的是502。
    proxy_busy_buffers_size 64k; # nginx会在没有完全读完后端响应就开始向客户端传送数据，所以它会划出一部分busy状态的buffer来专门向客户端传送数据(建议为proxy_buffers中单个缓冲区的2倍)，然后它继续从后端取数据。
    proxy_temp_file_write_size 64k; # 设置同时写入临时文件的数据量的总大小。通常设置为8k或者16k。
    proxy_http_version 1.1; # nginx在代理是默认http版本为1.0，由于文件的下载涉及到使用分块传递，但http1.0是不支持这个特性的，所以需要设置为 1.1。
    proxy_set_header Connection "upgrade"; # 升级为长连接 websocket
    proxy_set_header Upgrade $http_upgrade; # 升级http协议
    proxy_set_header permissions-policy interest-cohort=(); # 不希望加入谷歌的 FLoC

    # error_page 404 /404.html;
    # location = /404.html {
    #     root /www/common;
    # }

    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /www/common;
    # }

    #禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md) {
        return 404;
    }

    # 使用 root 声明的是根目录，经过 location 匹配后，直接去根目录下找访问路径中 sever_name 后面的文件地址。
    # 使用 alias 声明的是别名目录，经过 location 匹配后，去别名目录下找访问路径中 sever_name 后面除去 location 匹配的地址的剩余地址。这就好像给 location 匹配的地址取了个别名一样。
    #静态文件夹配置：http://host/static/**.txt
    # 已废弃
    # location /static/ {
    #     root /www/api.lzy.pub;
    #     # autoindex on;
    # }
    # #静态文件夹配置
    #location /static/ {  # 这里的 "/static" 是别名，并非路径，匹配时不带入
    #    alias /www/api.lzy.pub/static/;
    #    # autoindex on;
    #}

    location / {
        root /www/api.lzy.pub;
    }


    access_log  /www/wwwlogs/api.lzy.pub.log;
    error_log  /www/wwwlogs/api.lzy.pub.error.log;
}
